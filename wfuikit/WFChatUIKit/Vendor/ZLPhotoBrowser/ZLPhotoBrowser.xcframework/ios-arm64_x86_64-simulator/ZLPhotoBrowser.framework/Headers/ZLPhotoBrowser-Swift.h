#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef ZLPHOTOBROWSER_SWIFT_H
#define ZLPHOTOBROWSER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZLPhotoBrowser",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif






@class UIEvent;

@interface UIControl (SWIFT_EXTENSION(ZLPhotoBrowser))
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end







SWIFT_CLASS("_TtC14ZLPhotoBrowser16ZLAlbumListModel")
@interface ZLAlbumListModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum CaptureSessionPreset : NSInteger;
enum FocusMode : NSInteger;
enum ExposureMode : NSInteger;
enum FlashMode : NSInteger;
enum VideoExportType : NSInteger;

SWIFT_CLASS("_TtC14ZLPhotoBrowser21ZLCameraConfiguration")
@interface ZLCameraConfiguration : NSObject
/// Video resolution. Defaults to hd1280x720.
@property (nonatomic) enum CaptureSessionPreset sessionPreset;
/// Camera focus mode. Defaults to continuousAutoFocus
@property (nonatomic) enum FocusMode focusMode;
/// Camera exposure mode. Defaults to continuousAutoExposure
@property (nonatomic) enum ExposureMode exposureMode;
/// Camera flahs mode. Default is off. Defaults to off.
@property (nonatomic) enum FlashMode flashMode;
/// Video export format for recording video and editing video. Defaults to mov.
@property (nonatomic) enum VideoExportType videoExportType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CaptureSessionPreset, open) {
  CaptureSessionPresetCif352x288 = 0,
  CaptureSessionPresetVga640x480 = 1,
  CaptureSessionPresetHd1280x720 = 2,
  CaptureSessionPresetHd1920x1080 = 3,
  CaptureSessionPresetHd4K3840x2160 = 4,
};

typedef SWIFT_ENUM(NSInteger, FocusMode, open) {
  FocusModeAutoFocus = 0,
  FocusModeContinuousAutoFocus = 1,
};

typedef SWIFT_ENUM(NSInteger, ExposureMode, open) {
  ExposureModeAutoExpose = 0,
  ExposureModeContinuousAutoExposure = 1,
};

typedef SWIFT_ENUM(NSInteger, FlashMode, open) {
  FlashModeAuto = 0,
  FlashModeOn = 1,
  FlashModeOff = 2,
};

typedef SWIFT_ENUM(NSInteger, VideoExportType, open) {
  VideoExportTypeMov = 0,
  VideoExportTypeMp4 = 1,
};


@class UIImage;
@class NSURL;
@class NSCoder;
@class CAAnimation;
@class NSString;
@class NSBundle;

SWIFT_CLASS("_TtC14ZLPhotoBrowser14ZLCustomCamera")
@interface ZLCustomCamera : UIViewController <CAAnimationDelegate>
@property (nonatomic, copy) void (^ _Nullable takeDoneBlock)(UIImage * _Nullable, NSURL * _Nullable);
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface ZLCustomCamera (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class AVCaptureFileOutput;
@class AVCaptureConnection;

@interface ZLCustomCamera (SWIFT_EXTENSION(ZLPhotoBrowser)) <AVCaptureFileOutputRecordingDelegate>
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didStartRecordingToOutputFileAtURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections;
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didFinishRecordingToOutputFileAtURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections error:(NSError * _Nullable)error;
@end

@class AVCapturePhotoOutput;
@class AVCaptureResolvedPhotoSettings;
@class AVCaptureBracketedStillImageSettings;

@interface ZLCustomCamera (SWIFT_EXTENSION(ZLPhotoBrowser)) <AVCapturePhotoCaptureDelegate>
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output willCapturePhotoForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhotoSampleBuffer:(CMSampleBufferRef _Nullable)photoSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings bracketSettings:(AVCaptureBracketedStillImageSettings * _Nullable)bracketSettings error:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC14ZLPhotoBrowser10ZLDrawPath")
@interface ZLDrawPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class ZLImageClipRatio;
@class ZLFilter;
@class UIView;
@protocol ZLImageStickerContainerDelegate;

SWIFT_CLASS("_TtC14ZLPhotoBrowser24ZLEditImageConfiguration")
@interface ZLEditImageConfiguration : NSObject
/// Draw colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull drawColors;
/// The default draw color. If this color not in editImageDrawColors, will pick the first color in editImageDrawColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull defaultDrawColor;
/// Edit ratios for image editor.
@property (nonatomic, copy) NSArray<ZLImageClipRatio *> * _Nonnull clipRatios;
/// Text sticker colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull textStickerTextColors;
/// The default text sticker color. If this color not in textStickerTextColors, will pick the first color in textStickerTextColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull textStickerDefaultTextColor;
/// Filters for image editor.
@property (nonatomic, copy) NSArray<ZLFilter *> * _Nonnull filters;
@property (nonatomic, strong) UIView <ZLImageStickerContainerDelegate> * _Nullable imageStickerContainerView;
/// Give an impact feedback when the adjust slider value is zero. Defaults to true.
@property (nonatomic) BOOL impactFeedbackWhenAdjustSliderValueIsZero;
/// Impact feedback style. Defaults to .medium
@property (nonatomic) UIImpactFeedbackStyle impactFeedbackStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, EditTool, open) {
  EditToolDraw = 0,
  EditToolClip = 1,
  EditToolImageSticker = 2,
  EditToolTextSticker = 3,
  EditToolMosaic = 4,
  EditToolFilter = 5,
  EditToolAdjust = 6,
};

typedef SWIFT_ENUM(NSInteger, AdjustTool, open) {
  AdjustToolBrightness = 0,
  AdjustToolContrast = 1,
  AdjustToolSaturation = 2,
};



SWIFT_CLASS("_TtC14ZLPhotoBrowser16ZLEditImageModel")
@interface ZLEditImageModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIButton;
@class UIScrollView;
@class CAGradientLayer;
@class UIImageView;

SWIFT_CLASS("_TtC14ZLPhotoBrowser25ZLEditImageViewController")
@interface ZLEditImageViewController : UIViewController
@property (nonatomic) CGFloat drawColViewH;
@property (nonatomic) CGFloat filterColViewH;
@property (nonatomic) CGFloat adjustColViewH;
@property (nonatomic, strong) UIColor * _Nonnull ashbinNormalBgColor;
@property (nonatomic, strong) UIButton * _Nonnull cancelBtn;
@property (nonatomic, strong) UIScrollView * _Nonnull scrollView;
@property (nonatomic, strong) UIView * _Nonnull topShadowView;
@property (nonatomic, strong) CAGradientLayer * _Nonnull topShadowLayer;
@property (nonatomic, strong) UIView * _Nonnull bottomShadowView;
@property (nonatomic, strong) CAGradientLayer * _Nonnull bottomShadowLayer;
@property (nonatomic, strong) UIButton * _Nonnull doneBtn;
@property (nonatomic, strong) UIButton * _Nonnull revokeBtn;
@property (nonatomic, strong) UIView * _Nonnull ashbinView;
@property (nonatomic, strong) UIImageView * _Nonnull ashbinImgView;
@property (nonatomic) CGFloat drawLineWidth;
@property (nonatomic) CGFloat mosaicLineWidth;
@property (nonatomic, copy) void (^ _Nullable editFinishBlock)(UIImage * _Nonnull, ZLEditImageModel * _Nullable);
@property (nonatomic, copy) void (^ _Nullable cancelEditBlock)(void);
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
+ (void)showEditImageVCWithParentVC:(UIViewController * _Nullable)parentVC animate:(BOOL)animate image:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel cancel:(void (^ _Nullable)(void))cancel completion:(void (^ _Nullable)(UIImage * _Nonnull, ZLEditImageModel * _Nullable))completion;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;

@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegate>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end

@class AVAsset;

SWIFT_CLASS("_TtC14ZLPhotoBrowser25ZLEditVideoViewController")
@interface ZLEditVideoViewController : UIViewController
@property (nonatomic, copy) void (^ _Nullable editFinishBlock)(NSURL * _Nullable);
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// initialize
/// \param avAsset AVAsset对象，需要传入本地视频，网络视频不支持
///
/// \param animateDismiss 退出界面时是否显示dismiss动画
///
- (nonnull instancetype)initWithAvAsset:(AVAsset * _Nonnull)avAsset animateDismiss:(BOOL)animateDismiss OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLEditVideoViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayout;

@interface ZLEditVideoViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

enum ZLFilterType : NSInteger;

SWIFT_CLASS("_TtC14ZLPhotoBrowser8ZLFilter")
@interface ZLFilter : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name filterType:(enum ZLFilterType)filterType OBJC_DESIGNATED_INITIALIZER;
/// 可传入 applier 自定义滤镜
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name applier:(UIImage * _Nonnull (^ _Nullable)(UIImage * _Nonnull))applier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLFilter (SWIFT_EXTENSION(ZLPhotoBrowser))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ZLFilter *> * _Nonnull all;)
+ (NSArray<ZLFilter *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull normal;)
+ (ZLFilter * _Nonnull)normal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull clarendon;)
+ (ZLFilter * _Nonnull)clarendon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull nashville;)
+ (ZLFilter * _Nonnull)nashville SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull apply1977;)
+ (ZLFilter * _Nonnull)apply1977 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull toaster;)
+ (ZLFilter * _Nonnull)toaster SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull chrome;)
+ (ZLFilter * _Nonnull)chrome SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull fade;)
+ (ZLFilter * _Nonnull)fade SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull instant;)
+ (ZLFilter * _Nonnull)instant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull process;)
+ (ZLFilter * _Nonnull)process SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull transfer;)
+ (ZLFilter * _Nonnull)transfer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tone;)
+ (ZLFilter * _Nonnull)tone SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull linear;)
+ (ZLFilter * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull sepia;)
+ (ZLFilter * _Nonnull)sepia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull mono;)
+ (ZLFilter * _Nonnull)mono SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull noir;)
+ (ZLFilter * _Nonnull)noir SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tonal;)
+ (ZLFilter * _Nonnull)tonal SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZLFilterType, open) {
  ZLFilterTypeNormal = 0,
  ZLFilterTypeChrome = 1,
  ZLFilterTypeFade = 2,
  ZLFilterTypeInstant = 3,
  ZLFilterTypeProcess = 4,
  ZLFilterTypeTransfer = 5,
  ZLFilterTypeTone = 6,
  ZLFilterTypeLinear = 7,
  ZLFilterTypeSepia = 8,
  ZLFilterTypeMono = 9,
  ZLFilterTypeNoir = 10,
  ZLFilterTypeTonal = 11,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser16ZLImageClipRatio")
@interface ZLImageClipRatio : NSObject
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title whRatio:(CGFloat)whRatio isCircle:(BOOL)isCircle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLImageClipRatio (SWIFT_EXTENSION(ZLPhotoBrowser))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull custom;)
+ (ZLImageClipRatio * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull circle;)
+ (ZLImageClipRatio * _Nonnull)circle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh1x1;)
+ (ZLImageClipRatio * _Nonnull)wh1x1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x4;)
+ (ZLImageClipRatio * _Nonnull)wh3x4 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh4x3;)
+ (ZLImageClipRatio * _Nonnull)wh4x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh2x3;)
+ (ZLImageClipRatio * _Nonnull)wh2x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x2;)
+ (ZLImageClipRatio * _Nonnull)wh3x2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh9x16;)
+ (ZLImageClipRatio * _Nonnull)wh9x16 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh16x9;)
+ (ZLImageClipRatio * _Nonnull)wh16x9 SWIFT_WARN_UNUSED_RESULT;
@end

enum ZLURLType : NSInteger;

SWIFT_CLASS("_TtC14ZLPhotoBrowser24ZLImagePreviewController")
@interface ZLImagePreviewController : UIViewController
@property (nonatomic, copy) void (^ _Nullable doneBlock)(NSArray * _Nonnull);
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoHttpHeader;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// \param datas Must be one of PHAsset, UIImage and URL, will filter others in init function.
///
/// \param showBottomView If showSelectBtn is true, showBottomView is always true.
///
/// \param index Index for first display.
///
/// \param urlType Tell me the url is image or video.
///
/// \param urlImageLoader Called when cell will display, cell will layout after callback when image load finish. The first block is progress callback, second is load finish callback.
///
- (nonnull instancetype)initWithDatas:(NSArray * _Nonnull)datas index:(NSInteger)index showSelectBtn:(BOOL)showSelectBtn showBottomView:(BOOL)showBottomView urlType:(enum ZLURLType (^ _Nullable)(NSURL * _Nonnull))urlType urlImageLoader:(void (^ _Nullable)(NSURL * _Nonnull, UIImageView * _Nonnull, void (^ _Nonnull)(CGFloat), void (^ _Nonnull)(void)))urlImageLoader OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLImagePreviewController (SWIFT_EXTENSION(ZLPhotoBrowser))
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


@interface ZLImagePreviewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_PROTOCOL("_TtP14ZLPhotoBrowser31ZLImageStickerContainerDelegate_")
@protocol ZLImageStickerContainerDelegate
@property (nonatomic, copy) void (^ _Nullable selectImageBlock)(UIImage * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable hideBlock)(void);
- (void)showIn:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC14ZLPhotoBrowser19ZLImageStickerState")
@interface ZLImageStickerState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLLanguageType, open) {
  ZLLanguageTypeSystem = 0,
  ZLLanguageTypeChineseSimplified = 1,
  ZLLanguageTypeChineseTraditional = 2,
  ZLLanguageTypeEnglish = 3,
  ZLLanguageTypeJapanese = 4,
  ZLLanguageTypeFrench = 5,
  ZLLanguageTypeGerman = 6,
  ZLLanguageTypeRussian = 7,
  ZLLanguageTypeVietnamese = 8,
  ZLLanguageTypeKorean = 9,
  ZLLanguageTypeMalay = 10,
  ZLLanguageTypeItalian = 11,
  ZLLanguageTypeIndonesian = 12,
  ZLLanguageTypePortuguese = 13,
  ZLLanguageTypeSpanish = 14,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser12ZLMosaicPath")
@interface ZLMosaicPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLNoAuthorityType, open) {
  ZLNoAuthorityTypeLibrary = 0,
  ZLNoAuthorityTypeCamera = 1,
  ZLNoAuthorityTypeMicrophone = 2,
};

typedef SWIFT_ENUM(NSInteger, ZLPhotoBrowserStyle, open) {
/// The album list is embedded in the navigation of the thumbnail interface, click the drop-down display.
  ZLPhotoBrowserStyleEmbedAlbumList = 0,
/// The display relationship between the album list and the thumbnail interface is push.
  ZLPhotoBrowserStyleExternalAlbumList = 1,
};

enum CancelButtonStyle : NSInteger;
enum HUDStyle : NSInteger;
@class UIBlurEffect;
@class ZLPhotoThemeColorDeploy;
@class PHAsset;

SWIFT_CLASS("_TtC14ZLPhotoBrowser20ZLPhotoConfiguration")
@interface ZLPhotoConfiguration : NSObject
+ (ZLPhotoConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)resetConfiguration;
/// Framework style.
@property (nonatomic) enum ZLPhotoBrowserStyle style;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// text: Cancel.  image: ‘x’. Default to text.
@property (nonatomic) enum CancelButtonStyle navCancelButtonStyle;
/// Photo sorting method, the preview interface is not affected by this parameter. Defaults to true.
@property (nonatomic) BOOL sortAscending;
/// Anything superior than 1 will enable the multiple selection feature. Defaults to 9.
@property (nonatomic) NSInteger maxSelectCount;
/// A count for video max selection. Defaults to 0.
/// warning:
/// Only valid in mix selection mode. (i.e. allowMixSelect = true)
@property (nonatomic) NSInteger maxVideoSelectCount;
/// A count for video min selection. Defaults to 0.
/// warning:
/// Only valid in mix selection mode. (i.e. allowMixSelect = true)
@property (nonatomic) NSInteger minVideoSelectCount;
/// Whether photos and videos can be selected together. Defaults to true.
/// If set to false, only one video can be selected. Defaults to true.
@property (nonatomic) BOOL allowMixSelect;
/// Preview selection max preview count, if the value is zero, only show <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons. Defaults to 20.
@property (nonatomic) NSInteger maxPreviewCount;
@property (nonatomic) CGFloat cellCornerRadio;
/// If set to false, gif and livephoto cannot be selected either. Defaults to true.
@property (nonatomic) BOOL allowSelectImage;
@property (nonatomic) BOOL allowSelectVideo;
/// Allow select Gif, it only controls whether it is displayed in Gif form.
/// If value is false, the Gif logo is not displayed. Defaults to true.
@property (nonatomic) BOOL allowSelectGif;
/// Allow select LivePhoto, it only controls whether it is displayed in LivePhoto form.
/// If value is false, the LivePhoto logo is not displayed. Defaults to false.
@property (nonatomic) BOOL allowSelectLivePhoto;
/// Allow take photos in the album. Defaults to true.
/// warning:
/// If allowTakePhoto and allowRecordVideo are both false, it will not be displayed.
@property (nonatomic) BOOL allowTakePhotoInLibrary;
@property (nonatomic) BOOL allowEditImage;
@property (nonatomic) BOOL allowEditVideo;
/// Control whether to display the selection button animation when selecting. Defaults to true.
@property (nonatomic) BOOL animateSelectBtnWhenSelect;
/// Animation duration for select button
@property (nonatomic) CFTimeInterval selectBtnAnimationDuration;
/// After selecting a image/video in the thumbnail interface, enter the editing interface directly. Defaults to false.
/// <ul>
///   <li>
///     discussion: Editing image is only valid when allowEditImage is true and maxSelectCount is 1.
///     Editing video is only valid when allowEditVideo is true and maxSelectCount is 1.
///   </li>
/// </ul>
@property (nonatomic) BOOL editAfterSelectThumbnailImage;
/// Only valid when allowMixSelect is false and allowEditVideo is true. Defaults to true.
/// Just like the Wechat-Timeline selection style. If you want to crop the video after select thumbnail under allowMixSelect = true, please use <em>editAfterSelectThumbnailImage</em>.
@property (nonatomic) BOOL cropVideoAfterSelectThumbnail;
/// If image edit tools only has clip and this property is true. When you click edit, the cropping interface (i.e. ZLClipImageViewController) will be displayed. Defaults to false.
@property (nonatomic) BOOL showClipDirectlyIfOnlyHasClipTool;
/// Save the edited image to the album after editing. Defaults to true.
@property (nonatomic) BOOL saveNewImageAfterEdit;
/// If true, you can slide select photos in album. Defaults to true.
@property (nonatomic) BOOL allowSlideSelect;
/// When slide select is active, will auto scroll to top or bottom when your finger at the top or bottom. Defaults to true.
@property (nonatomic) BOOL autoScrollWhenSlideSelectIsActive;
/// The max speed (pt/s) of auto scroll. Defaults to 600.
@property (nonatomic) CGFloat autoScrollMaxSpeed;
/// If true, you can drag select photo when preview selection style. Defaults to false.
@property (nonatomic) BOOL allowDragSelect;
/// Allow select full image. Defaults to true.
@property (nonatomic) BOOL allowSelectOriginal;
/// Allow access to the preview large image interface (That is, whether to allow access to the large image interface after clicking the thumbnail image). Defaults to true.
@property (nonatomic) BOOL allowPreviewPhotos;
/// Whether to show the status bar when previewing photos. Defaults to false.
@property (nonatomic) BOOL showStatusBarInPreviewInterface;
/// Whether to show the preview button (i.e. the preview button in the lower left corner of the thumbnail interface). Defaults to true.
@property (nonatomic) BOOL showPreviewButtonInAlbum;
/// The column count when iPhone is in portait mode. Minimum is 2, maximum is 6. Defaults to 4.
/// \code
/// iPhone landscape mode: columnCount += 2.
/// iPad portait mode: columnCount += 2.
/// iPad landscape mode: columnCount += 4.
///
/// \endcode
@property (nonatomic) NSInteger columnCount;
/// Maximum cropping time when editing video, unit: second. Defaults to 10.
@property (nonatomic) NSInteger maxEditVideoTime;
/// Allow to choose the maximum duration of the video. Defaults to 120.
@property (nonatomic) NSInteger maxSelectVideoDuration;
/// Allow to choose the minimum duration of the video. Defaults to 0.
@property (nonatomic) NSInteger minSelectVideoDuration;
/// Image editor configuration.
@property (nonatomic, strong) ZLEditImageConfiguration * _Nonnull editImageConfiguration;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull editImageDrawColors SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, strong) UIColor * _Nonnull editImageDefaultDrawColor SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, copy) NSArray<ZLImageClipRatio *> * _Nonnull editImageClipRatios SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull textStickerTextColors SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, strong) UIColor * _Nonnull textStickerDefaultTextColor SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, copy) NSArray<ZLFilter *> * _Nonnull filters SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, strong) UIView <ZLImageStickerContainerDelegate> * _Nullable imageStickerContainerView SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
/// Show the image captured by the camera is displayed on the camera button inside the album. Defaults to false.
@property (nonatomic) BOOL showCaptureImageOnTakePhotoBtn;
/// In single selection mode, whether to display the selection button. Defaults to false.
@property (nonatomic) BOOL showSelectBtnWhenSingleSelect;
/// Overlay a mask layer on top of the selected photos. Defaults to true.
@property (nonatomic) BOOL showSelectedMask;
/// Display a border on the selected photos cell. Defaults to false.
@property (nonatomic) BOOL showSelectedBorder;
/// Overlay a mask layer above the cells that cannot be selected. Defaults to true.
@property (nonatomic) BOOL showInvalidMask;
/// Display the index of the selected photos. Defaults to true.
@property (nonatomic) BOOL showSelectedIndex;
/// Display the selected photos at the bottom of the preview large photos interface. Defaults to true.
@property (nonatomic) BOOL showSelectedPhotoPreview;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”, “zl_btn_unselected”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull customImageNames;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”: selectedImage, “zl_btn_unselected”: unselectedImage].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, UIImage *> * _Nonnull customImageForKey_objc;
/// Allow framework fetch photos when callback. Defaults to true.
@property (nonatomic) BOOL shouldAnialysisAsset;
/// Timeout for image parsing. Defaults to 20.
@property (nonatomic) NSTimeInterval timeout;
/// Language for framework.
@property (nonatomic) enum ZLLanguageType languageType;
/// Developers can customize languages (This property is only for objc).
/// warning:
/// Please pay attention to the placeholders contained in languages when changing, such as %ld, %@.
/// <ul>
///   <li>
///     example: If you needs to replace
///     key: @“loading”, value: @“loading, waiting please” language,
///     The dictionary that needs to be passed in is @[@“loading”: @“text to be replaced”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customLanguageKeyValue_objc;
/// Whether to use custom camera. Defaults to true.
@property (nonatomic) BOOL useCustomCamera;
/// Allow taking photos in the camera (Need allowSelectImage to be true). Defaults to true.
@property (nonatomic) BOOL allowTakePhoto;
/// Allow recording in the camera (Need allowSelectVideo to be true). Defaults to true.
@property (nonatomic) BOOL allowRecordVideo;
/// Minimum recording duration. Defaults to 0.
@property (nonatomic) NSInteger minRecordDuration;
/// Maximum recording duration. Defaults to 10, minimum is 1.
@property (nonatomic) NSInteger maxRecordDuration;
/// The configuration for camera.
@property (nonatomic, strong) ZLCameraConfiguration * _Nonnull cameraConfiguration;
/// Hud style. Defaults to lightBlur.
@property (nonatomic) enum HUDStyle hudStyle;
/// The blur effect of the navigation bar in the album list
@property (nonatomic, strong) UIBlurEffect * _Nullable navViewBlurEffectOfAlbumList;
/// The blur effect of the navigation bar in the preview interface
@property (nonatomic, strong) UIBlurEffect * _Nullable navViewBlurEffectOfPreview;
/// The blur effect of the bottom tool bar in the album list
@property (nonatomic, strong) UIBlurEffect * _Nullable bottomViewBlurEffectOfAlbumList;
/// The blur effect of the bottom tool bar in the preview interface
@property (nonatomic, strong) UIBlurEffect * _Nullable bottomViewBlurEffectOfPreview;
/// Color configuration for framework.
@property (nonatomic, strong) ZLPhotoThemeColorDeploy * _Nonnull themeColorDeploy;
/// Font name.
@property (nonatomic, copy) NSString * _Nullable themeFontName;
/// This block will be called before selecting an image, the developer can first determine whether the asset is allowed to be selected.
/// Only control whether it is allowed to be selected, and will not affect the selection logic in the framework.
/// <ul>
///   <li>
///     Tips: If the choice is not allowed, the developer can toast prompt the user for relevant information.
///   </li>
/// </ul>
@property (nonatomic, copy) BOOL (^ _Nullable canSelectAsset)(PHAsset * _Nonnull);
/// If user choose limited Photo mode, a button with ‘+’ will be added to the ZLThumbnailViewController. It will call PHPhotoLibrary.shared().presentLimitedLibraryPicker(from:) to add photo. Defaults to true.
/// E.g., Sina Weibo’s ImagePicker
@property (nonatomic) BOOL showAddPhotoButton;
/// iOS14 limited Photo mode, will show collection footer view in ZLThumbnailViewController.
/// Will go to system setting if clicked. Defaults to true.
@property (nonatomic) BOOL showEnterSettingTips;
/// Callback after the no authority alert dismiss.
@property (nonatomic, copy) void (^ _Nullable noAuthorityCallback)(enum ZLNoAuthorityType);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CancelButtonStyle, open) {
  CancelButtonStyleText = 0,
  CancelButtonStyleImage = 1,
};


@interface ZLPhotoConfiguration (SWIFT_EXTENSION(ZLPhotoBrowser))
- (ZLPhotoConfiguration * _Nonnull)allowSelectVideo:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)canSelectAsset:(BOOL (^ _Nullable)(PHAsset * _Nonnull))block;
- (ZLPhotoConfiguration * _Nonnull)showAddPhotoButton:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)showEnterSettingTips:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)noAuthorityCallback:(void (^ _Nullable)(enum ZLNoAuthorityType))callback;
@end

@class ZLPhotoModel;
@class NSData;
@class PHLivePhoto;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14ZLPhotoBrowser14ZLPhotoManager")
@interface ZLPhotoManager : NSObject
/// Save image to album.
+ (void)saveImageToAlbumWithImage:(UIImage * _Nonnull)image completion:(void (^ _Nullable)(BOOL, PHAsset * _Nullable))completion;
/// Save video to album.
+ (void)saveVideoToAlbumWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nullable)(BOOL, PHAsset * _Nullable))completion;
/// Fetch photos from result.
+ (NSArray<ZLPhotoModel *> * _Nonnull)fetchPhotoIn:(PHFetchResult<PHAsset *> * _Nonnull)result ascending:(BOOL)ascending allowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo limitCount:(NSInteger)limitCount SWIFT_WARN_UNUSED_RESULT;
/// Fetch all album list.
+ (void)getPhotoAlbumListWithAscending:(BOOL)ascending allowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<ZLAlbumListModel *> * _Nonnull))completion;
/// Fetch camera roll album.
+ (void)getCameraRollAlbumWithAllowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo completion:(void (^ _Nonnull)(ZLAlbumListModel * _Nonnull))completion;
+ (PHImageRequestID)fetchImageFor:(PHAsset * _Nonnull)asset size:(CGSize)size progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(UIImage * _Nullable, BOOL))completion;
+ (PHImageRequestID)fetchOriginalImageFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(UIImage * _Nullable, BOOL))completion;
/// Fetch asset data.
+ (PHImageRequestID)fetchOriginalImageDataFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(NSData * _Nonnull, NSDictionary * _Nullable, BOOL))completion;
+ (PHImageRequestID)fetchLivePhotoFor:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(PHLivePhoto * _Nullable, NSDictionary * _Nullable, BOOL))completion SWIFT_WARN_UNUSED_RESULT;
+ (PHImageRequestID)fetchVideoFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(AVPlayerItem * _Nullable, NSDictionary * _Nullable, BOOL))completion SWIFT_WARN_UNUSED_RESULT;
+ (PHImageRequestID)fetchAVAssetForVideo:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Fetch asset local file path.
+ (void)fetchAssetFilePathWithAsset:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLPhotoManager (SWIFT_EXTENSION(ZLPhotoBrowser))
+ (BOOL)hasPhotoLibratyAuthority SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasCameraAuthority SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasMicrophoneAuthority SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14ZLPhotoBrowser12ZLPhotoModel")
@interface ZLPhotoModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC14ZLPhotoBrowser19ZLPhotoPreviewSheet")
@interface ZLPhotoPreviewSheet : UIView
/// Success callback
/// block params
/// <ul>
///   <li>
///     params1: images for asset.
///   </li>
///   <li>
///     params2: selected assets
///   </li>
///   <li>
///     params3: is full image
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable selectImageBlock)(NSArray<UIImage *> * _Nonnull, NSArray<PHAsset *> * _Nonnull, BOOL);
/// Callback for photos that failed to parse
/// block params
/// <ul>
///   <li>
///     params1: failed assets.
///   </li>
///   <li>
///     params2: index for asset
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable selectImageRequestErrorBlock)(NSArray<PHAsset *> * _Nonnull, NSArray<NSNumber *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// \param selectedAssets preselected assets
///
- (nonnull instancetype)initWithSelectedAssets:(NSArray<PHAsset *> * _Nullable)selectedAssets OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)showPreviewWithAnimate:(BOOL)animate sender:(UIViewController * _Nonnull)sender;
- (void)showPhotoLibraryWithSender:(UIViewController * _Nonnull)sender;
/// 传入已选择的assets，并预览
- (void)previewAssetsWithSender:(UIViewController * _Nonnull)sender assets:(NSArray<PHAsset *> * _Nonnull)assets index:(NSInteger)index isOriginal:(BOOL)isOriginal showBottomViewAndSelectBtn:(BOOL)showBottomViewAndSelectBtn;
@end

@class PHChange;

@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <PHPhotoLibraryChangeObserver>
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInstance;
@end


@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImagePickerController;

@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end


@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// Color deploy
SWIFT_CLASS("_TtC14ZLPhotoBrowser23ZLPhotoThemeColorDeploy")
@interface ZLPhotoThemeColorDeploy : NSObject
+ (ZLPhotoThemeColorDeploy * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Preview selection mode, transparent background color above.
/// 预览快速选择模式下，上方透明区域背景色
@property (nonatomic, strong) UIColor * _Nonnull previewBgColor;
/// Preview selection mode, a background color for <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons.
/// 预览快速选择模式下，按钮背景颜色
@property (nonatomic, strong) UIColor * _Nonnull previewBtnBgColor;
/// Preview selection mode, a text color for <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons.
/// 预览快速选择模式下，按钮标题颜色
@property (nonatomic, strong) UIColor * _Nonnull previewBtnTitleColor;
/// Preview selection mode, cancel button title color when the selection amount is superior than 0.
/// 预览快速选择模式下，按钮标题高亮颜色
@property (nonatomic, strong) UIColor * _Nonnull previewBtnHighlightTitleColor;
/// A color for navigation bar.
/// 相册列表及小图界面导航条背景色
@property (nonatomic, strong) UIColor * _Nonnull navBarColor;
/// A color for navigation bar in preview interface.
/// 预览大图界面的导航条背景色
@property (nonatomic, strong) UIColor * _Nonnull navBarColorOfPreviewVC;
/// A color for Navigation bar text.
/// 相册列表及小图界面导航栏标题颜色
@property (nonatomic, strong) UIColor * _Nonnull navTitleColor;
/// A color for Navigation bar text of preview vc.
/// 预览大图界面导航栏标题颜色
@property (nonatomic, strong) UIColor * _Nonnull navTitleColorOfPreviewVC;
/// The background color of the title view when the frame style is embedAlbumList.
/// 下拉选择相册列表模式下，选择区域的背景色
@property (nonatomic, strong) UIColor * _Nonnull navEmbedTitleViewBgColor;
/// A color for background in album list.
/// 相册列表背景色
@property (nonatomic, strong) UIColor * _Nonnull albumListBgColor;
/// A color for album list title label.
/// 相册列表标题颜色
@property (nonatomic, strong) UIColor * _Nonnull albumListTitleColor;
/// A color for album list count label.
/// 相册列表数量label的颜色
@property (nonatomic, strong) UIColor * _Nonnull albumListCountColor;
/// A color for album list separator.
/// 相册列表分割线颜色
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// A color for background in thumbnail interface.
/// 相册小图界面背景色
@property (nonatomic, strong) UIColor * _Nonnull thumbnailBgColor;
/// A color for background in bottom tool view.
/// 相册小图界面底部工具条背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBgColor;
/// A color for background in bottom tool view in preview interface.
/// 预览大图界面底部工具条背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBgColorOfPreviewVC;
/// The normal state title color of bottom tool view buttons. Without done button.
/// 相册小图界面底部按钮可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalTitleColor;
/// The normal state title color of bottom tool view done button.
/// 相册小图界面底部 <code>完成</code> 按钮可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnNormalTitleColor;
/// The normal state title color of bottom tool view buttons in preview interface.  Without done button.
/// 预览大图界面底部按钮可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalTitleColorOfPreviewVC;
/// The normal state title color of bottom tool view done button.
/// 预览大图界面底部 <code>完成</code> 按钮可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnNormalTitleColorOfPreviewVC;
/// The disable state title color of bottom tool view buttons.  Without done button.
/// 相册小图界面底部按钮不可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableTitleColor;
/// The disable state title color of bottom tool view done button.
/// 相册小图界面底部 <code>完成</code> 按钮不可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnDisableTitleColor;
/// The disable state title color of bottom tool view buttons in preview interface.  Without done button.
/// 预览大图界面底部按钮不可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableTitleColorOfPreviewVC;
/// The disable state title color of bottom tool view done button  in preview interface.
/// 预览大图界面底部 <code>完成</code> 按钮不可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnDisableTitleColorOfPreviewVC;
/// The normal state background color of bottom tool view buttons.
/// 相册小图界面底部按钮可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalBgColor;
/// The normal state background color of bottom tool view buttons in preview interface.
/// 预览大图界面底部按钮可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalBgColorOfPreviewVC;
/// The disable state background color of bottom tool view buttons.
/// 相册小图界面底部按钮不可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableBgColor;
/// The disable state background color of bottom tool view buttons in preview interface.
/// 预览大图界面底部按钮不可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableBgColorOfPreviewVC;
/// With iOS14 limited authority, a color for select more photos at the bottom of the thumbnail interface.
/// iOS14 limited权限下，下方提示选择更多图片信息文字的颜色
@property (nonatomic, strong) UIColor * _Nonnull selectMorePhotoWhenAuthIsLismitedTitleColor;
/// The record progress color of custom camera.
/// 自定义相机录制视频时进度条颜色
@property (nonatomic, strong) UIColor * _Nonnull cameraRecodeProgressColor;
/// Mask layer color of selected cell.
/// 已选择照片上方遮罩阴影颜色
@property (nonatomic, strong) UIColor * _Nonnull selectedMaskColor;
/// Border color of selected cell.
/// 已选择照片border颜色
@property (nonatomic, strong) UIColor * _Nonnull selectedBorderColor;
/// Mask layer color of the cell that cannot be selected.
/// 不可选的照片上方遮罩阴影颜色
@property (nonatomic, strong) UIColor * _Nonnull invalidMaskColor;
/// The background color of selected cell index label.
/// 已选照片右上角序号label背景色
@property (nonatomic, strong) UIColor * _Nonnull indexLabelBgColor;
/// The background color of camera cell inside album.
/// 相册小图界面拍照按钮背景色
@property (nonatomic, strong) UIColor * _Nonnull cameraCellBgColor;
/// The normal color of adjust slider.
/// 编辑图片，调整饱和度、对比度、亮度时，右侧slider背景色
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderNormalColor;
/// The tint color of adjust slider.
/// 编辑图片，调整饱和度、对比度、亮度时，右侧slider背景高亮色
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderTintColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14ZLPhotoBrowser13ZLProgressHUD")
@interface ZLProgressHUD : UIView
- (nonnull instancetype)initWithStyle:(enum HUDStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)showWithTimeout:(NSTimeInterval)timeout;
- (void)hide;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, HUDStyle, open) {
  HUDStyleLight = 0,
  HUDStyleLightBlur = 1,
  HUDStyleDark = 2,
  HUDStyleDarkBlur = 3,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser18ZLTextStickerState")
@interface ZLTextStickerState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLURLType, open) {
  ZLURLTypeImage = 0,
  ZLURLTypeVideo = 1,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser14ZLVideoManager")
@interface ZLVideoManager : NSObject
/// 没有针对不同分辨率视频做处理，仅用于处理相机拍照的视频
+ (void)mergeVideosWithFileUrls:(NSArray<NSURL *> * _Nonnull)fileUrls completion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLVideoManager (SWIFT_EXTENSION(ZLPhotoBrowser))
@end

typedef SWIFT_ENUM(NSInteger, ExportType, open) {
  ExportTypeMov = 0,
  ExportTypeMp4 = 1,
};


@interface ZLVideoManager (SWIFT_EXTENSION(ZLPhotoBrowser))
+ (void)exportVideoFor:(PHAsset * _Nonnull)asset exportType:(enum ExportType)exportType presetName:(NSString * _Nonnull)presetName complete:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))complete;
+ (void)exportVideoFor:(AVAsset * _Nonnull)asset range:(CMTimeRange)range exportType:(enum ExportType)exportType presetName:(NSString * _Nonnull)presetName complete:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))complete;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef ZLPHOTOBROWSER_SWIFT_H
#define ZLPHOTOBROWSER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZLPhotoBrowser",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif






@class UIEvent;

@interface UIControl (SWIFT_EXTENSION(ZLPhotoBrowser))
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end







SWIFT_CLASS("_TtC14ZLPhotoBrowser16ZLAlbumListModel")
@interface ZLAlbumListModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum CaptureSessionPreset : NSInteger;
enum FocusMode : NSInteger;
enum ExposureMode : NSInteger;
enum FlashMode : NSInteger;
enum VideoExportType : NSInteger;

SWIFT_CLASS("_TtC14ZLPhotoBrowser21ZLCameraConfiguration")
@interface ZLCameraConfiguration : NSObject
/// Video resolution. Defaults to hd1280x720.
@property (nonatomic) enum CaptureSessionPreset sessionPreset;
/// Camera focus mode. Defaults to continuousAutoFocus
@property (nonatomic) enum FocusMode focusMode;
/// Camera exposure mode. Defaults to continuousAutoExposure
@property (nonatomic) enum ExposureMode exposureMode;
/// Camera flahs mode. Default is off. Defaults to off.
@property (nonatomic) enum FlashMode flashMode;
/// Video export format for recording video and editing video. Defaults to mov.
@property (nonatomic) enum VideoExportType videoExportType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CaptureSessionPreset, open) {
  CaptureSessionPresetCif352x288 = 0,
  CaptureSessionPresetVga640x480 = 1,
  CaptureSessionPresetHd1280x720 = 2,
  CaptureSessionPresetHd1920x1080 = 3,
  CaptureSessionPresetHd4K3840x2160 = 4,
};

typedef SWIFT_ENUM(NSInteger, FocusMode, open) {
  FocusModeAutoFocus = 0,
  FocusModeContinuousAutoFocus = 1,
};

typedef SWIFT_ENUM(NSInteger, ExposureMode, open) {
  ExposureModeAutoExpose = 0,
  ExposureModeContinuousAutoExposure = 1,
};

typedef SWIFT_ENUM(NSInteger, FlashMode, open) {
  FlashModeAuto = 0,
  FlashModeOn = 1,
  FlashModeOff = 2,
};

typedef SWIFT_ENUM(NSInteger, VideoExportType, open) {
  VideoExportTypeMov = 0,
  VideoExportTypeMp4 = 1,
};


@class UIImage;
@class NSURL;
@class NSCoder;
@class CAAnimation;
@class NSString;
@class NSBundle;

SWIFT_CLASS("_TtC14ZLPhotoBrowser14ZLCustomCamera")
@interface ZLCustomCamera : UIViewController <CAAnimationDelegate>
@property (nonatomic, copy) void (^ _Nullable takeDoneBlock)(UIImage * _Nullable, NSURL * _Nullable);
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface ZLCustomCamera (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class AVCaptureFileOutput;
@class AVCaptureConnection;

@interface ZLCustomCamera (SWIFT_EXTENSION(ZLPhotoBrowser)) <AVCaptureFileOutputRecordingDelegate>
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didStartRecordingToOutputFileAtURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections;
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didFinishRecordingToOutputFileAtURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections error:(NSError * _Nullable)error;
@end

@class AVCapturePhotoOutput;
@class AVCaptureResolvedPhotoSettings;
@class AVCaptureBracketedStillImageSettings;

@interface ZLCustomCamera (SWIFT_EXTENSION(ZLPhotoBrowser)) <AVCapturePhotoCaptureDelegate>
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output willCapturePhotoForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhotoSampleBuffer:(CMSampleBufferRef _Nullable)photoSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings bracketSettings:(AVCaptureBracketedStillImageSettings * _Nullable)bracketSettings error:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC14ZLPhotoBrowser10ZLDrawPath")
@interface ZLDrawPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class ZLImageClipRatio;
@class ZLFilter;
@class UIView;
@protocol ZLImageStickerContainerDelegate;

SWIFT_CLASS("_TtC14ZLPhotoBrowser24ZLEditImageConfiguration")
@interface ZLEditImageConfiguration : NSObject
/// Draw colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull drawColors;
/// The default draw color. If this color not in editImageDrawColors, will pick the first color in editImageDrawColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull defaultDrawColor;
/// Edit ratios for image editor.
@property (nonatomic, copy) NSArray<ZLImageClipRatio *> * _Nonnull clipRatios;
/// Text sticker colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull textStickerTextColors;
/// The default text sticker color. If this color not in textStickerTextColors, will pick the first color in textStickerTextColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull textStickerDefaultTextColor;
/// Filters for image editor.
@property (nonatomic, copy) NSArray<ZLFilter *> * _Nonnull filters;
@property (nonatomic, strong) UIView <ZLImageStickerContainerDelegate> * _Nullable imageStickerContainerView;
/// Give an impact feedback when the adjust slider value is zero. Defaults to true.
@property (nonatomic) BOOL impactFeedbackWhenAdjustSliderValueIsZero;
/// Impact feedback style. Defaults to .medium
@property (nonatomic) UIImpactFeedbackStyle impactFeedbackStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, EditTool, open) {
  EditToolDraw = 0,
  EditToolClip = 1,
  EditToolImageSticker = 2,
  EditToolTextSticker = 3,
  EditToolMosaic = 4,
  EditToolFilter = 5,
  EditToolAdjust = 6,
};

typedef SWIFT_ENUM(NSInteger, AdjustTool, open) {
  AdjustToolBrightness = 0,
  AdjustToolContrast = 1,
  AdjustToolSaturation = 2,
};



SWIFT_CLASS("_TtC14ZLPhotoBrowser16ZLEditImageModel")
@interface ZLEditImageModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIButton;
@class UIScrollView;
@class CAGradientLayer;
@class UIImageView;

SWIFT_CLASS("_TtC14ZLPhotoBrowser25ZLEditImageViewController")
@interface ZLEditImageViewController : UIViewController
@property (nonatomic) CGFloat drawColViewH;
@property (nonatomic) CGFloat filterColViewH;
@property (nonatomic) CGFloat adjustColViewH;
@property (nonatomic, strong) UIColor * _Nonnull ashbinNormalBgColor;
@property (nonatomic, strong) UIButton * _Nonnull cancelBtn;
@property (nonatomic, strong) UIScrollView * _Nonnull scrollView;
@property (nonatomic, strong) UIView * _Nonnull topShadowView;
@property (nonatomic, strong) CAGradientLayer * _Nonnull topShadowLayer;
@property (nonatomic, strong) UIView * _Nonnull bottomShadowView;
@property (nonatomic, strong) CAGradientLayer * _Nonnull bottomShadowLayer;
@property (nonatomic, strong) UIButton * _Nonnull doneBtn;
@property (nonatomic, strong) UIButton * _Nonnull revokeBtn;
@property (nonatomic, strong) UIView * _Nonnull ashbinView;
@property (nonatomic, strong) UIImageView * _Nonnull ashbinImgView;
@property (nonatomic) CGFloat drawLineWidth;
@property (nonatomic) CGFloat mosaicLineWidth;
@property (nonatomic, copy) void (^ _Nullable editFinishBlock)(UIImage * _Nonnull, ZLEditImageModel * _Nullable);
@property (nonatomic, copy) void (^ _Nullable cancelEditBlock)(void);
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
+ (void)showEditImageVCWithParentVC:(UIViewController * _Nullable)parentVC animate:(BOOL)animate image:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel cancel:(void (^ _Nullable)(void))cancel completion:(void (^ _Nullable)(UIImage * _Nonnull, ZLEditImageModel * _Nullable))completion;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;

@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegate>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



@interface ZLEditImageViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end

@class AVAsset;

SWIFT_CLASS("_TtC14ZLPhotoBrowser25ZLEditVideoViewController")
@interface ZLEditVideoViewController : UIViewController
@property (nonatomic, copy) void (^ _Nullable editFinishBlock)(NSURL * _Nullable);
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// initialize
/// \param avAsset AVAsset对象，需要传入本地视频，网络视频不支持
///
/// \param animateDismiss 退出界面时是否显示dismiss动画
///
- (nonnull instancetype)initWithAvAsset:(AVAsset * _Nonnull)avAsset animateDismiss:(BOOL)animateDismiss OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLEditVideoViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayout;

@interface ZLEditVideoViewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

enum ZLFilterType : NSInteger;

SWIFT_CLASS("_TtC14ZLPhotoBrowser8ZLFilter")
@interface ZLFilter : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name filterType:(enum ZLFilterType)filterType OBJC_DESIGNATED_INITIALIZER;
/// 可传入 applier 自定义滤镜
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name applier:(UIImage * _Nonnull (^ _Nullable)(UIImage * _Nonnull))applier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLFilter (SWIFT_EXTENSION(ZLPhotoBrowser))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ZLFilter *> * _Nonnull all;)
+ (NSArray<ZLFilter *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull normal;)
+ (ZLFilter * _Nonnull)normal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull clarendon;)
+ (ZLFilter * _Nonnull)clarendon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull nashville;)
+ (ZLFilter * _Nonnull)nashville SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull apply1977;)
+ (ZLFilter * _Nonnull)apply1977 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull toaster;)
+ (ZLFilter * _Nonnull)toaster SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull chrome;)
+ (ZLFilter * _Nonnull)chrome SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull fade;)
+ (ZLFilter * _Nonnull)fade SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull instant;)
+ (ZLFilter * _Nonnull)instant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull process;)
+ (ZLFilter * _Nonnull)process SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull transfer;)
+ (ZLFilter * _Nonnull)transfer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tone;)
+ (ZLFilter * _Nonnull)tone SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull linear;)
+ (ZLFilter * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull sepia;)
+ (ZLFilter * _Nonnull)sepia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull mono;)
+ (ZLFilter * _Nonnull)mono SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull noir;)
+ (ZLFilter * _Nonnull)noir SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tonal;)
+ (ZLFilter * _Nonnull)tonal SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZLFilterType, open) {
  ZLFilterTypeNormal = 0,
  ZLFilterTypeChrome = 1,
  ZLFilterTypeFade = 2,
  ZLFilterTypeInstant = 3,
  ZLFilterTypeProcess = 4,
  ZLFilterTypeTransfer = 5,
  ZLFilterTypeTone = 6,
  ZLFilterTypeLinear = 7,
  ZLFilterTypeSepia = 8,
  ZLFilterTypeMono = 9,
  ZLFilterTypeNoir = 10,
  ZLFilterTypeTonal = 11,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser16ZLImageClipRatio")
@interface ZLImageClipRatio : NSObject
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title whRatio:(CGFloat)whRatio isCircle:(BOOL)isCircle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLImageClipRatio (SWIFT_EXTENSION(ZLPhotoBrowser))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull custom;)
+ (ZLImageClipRatio * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull circle;)
+ (ZLImageClipRatio * _Nonnull)circle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh1x1;)
+ (ZLImageClipRatio * _Nonnull)wh1x1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x4;)
+ (ZLImageClipRatio * _Nonnull)wh3x4 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh4x3;)
+ (ZLImageClipRatio * _Nonnull)wh4x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh2x3;)
+ (ZLImageClipRatio * _Nonnull)wh2x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x2;)
+ (ZLImageClipRatio * _Nonnull)wh3x2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh9x16;)
+ (ZLImageClipRatio * _Nonnull)wh9x16 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh16x9;)
+ (ZLImageClipRatio * _Nonnull)wh16x9 SWIFT_WARN_UNUSED_RESULT;
@end

enum ZLURLType : NSInteger;

SWIFT_CLASS("_TtC14ZLPhotoBrowser24ZLImagePreviewController")
@interface ZLImagePreviewController : UIViewController
@property (nonatomic, copy) void (^ _Nullable doneBlock)(NSArray * _Nonnull);
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoHttpHeader;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// \param datas Must be one of PHAsset, UIImage and URL, will filter others in init function.
///
/// \param showBottomView If showSelectBtn is true, showBottomView is always true.
///
/// \param index Index for first display.
///
/// \param urlType Tell me the url is image or video.
///
/// \param urlImageLoader Called when cell will display, cell will layout after callback when image load finish. The first block is progress callback, second is load finish callback.
///
- (nonnull instancetype)initWithDatas:(NSArray * _Nonnull)datas index:(NSInteger)index showSelectBtn:(BOOL)showSelectBtn showBottomView:(BOOL)showBottomView urlType:(enum ZLURLType (^ _Nullable)(NSURL * _Nonnull))urlType urlImageLoader:(void (^ _Nullable)(NSURL * _Nonnull, UIImageView * _Nonnull, void (^ _Nonnull)(CGFloat), void (^ _Nonnull)(void)))urlImageLoader OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLImagePreviewController (SWIFT_EXTENSION(ZLPhotoBrowser))
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


@interface ZLImagePreviewController (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_PROTOCOL("_TtP14ZLPhotoBrowser31ZLImageStickerContainerDelegate_")
@protocol ZLImageStickerContainerDelegate
@property (nonatomic, copy) void (^ _Nullable selectImageBlock)(UIImage * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable hideBlock)(void);
- (void)showIn:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC14ZLPhotoBrowser19ZLImageStickerState")
@interface ZLImageStickerState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLLanguageType, open) {
  ZLLanguageTypeSystem = 0,
  ZLLanguageTypeChineseSimplified = 1,
  ZLLanguageTypeChineseTraditional = 2,
  ZLLanguageTypeEnglish = 3,
  ZLLanguageTypeJapanese = 4,
  ZLLanguageTypeFrench = 5,
  ZLLanguageTypeGerman = 6,
  ZLLanguageTypeRussian = 7,
  ZLLanguageTypeVietnamese = 8,
  ZLLanguageTypeKorean = 9,
  ZLLanguageTypeMalay = 10,
  ZLLanguageTypeItalian = 11,
  ZLLanguageTypeIndonesian = 12,
  ZLLanguageTypePortuguese = 13,
  ZLLanguageTypeSpanish = 14,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser12ZLMosaicPath")
@interface ZLMosaicPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLNoAuthorityType, open) {
  ZLNoAuthorityTypeLibrary = 0,
  ZLNoAuthorityTypeCamera = 1,
  ZLNoAuthorityTypeMicrophone = 2,
};

typedef SWIFT_ENUM(NSInteger, ZLPhotoBrowserStyle, open) {
/// The album list is embedded in the navigation of the thumbnail interface, click the drop-down display.
  ZLPhotoBrowserStyleEmbedAlbumList = 0,
/// The display relationship between the album list and the thumbnail interface is push.
  ZLPhotoBrowserStyleExternalAlbumList = 1,
};

enum CancelButtonStyle : NSInteger;
enum HUDStyle : NSInteger;
@class UIBlurEffect;
@class ZLPhotoThemeColorDeploy;
@class PHAsset;

SWIFT_CLASS("_TtC14ZLPhotoBrowser20ZLPhotoConfiguration")
@interface ZLPhotoConfiguration : NSObject
+ (ZLPhotoConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)resetConfiguration;
/// Framework style.
@property (nonatomic) enum ZLPhotoBrowserStyle style;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// text: Cancel.  image: ‘x’. Default to text.
@property (nonatomic) enum CancelButtonStyle navCancelButtonStyle;
/// Photo sorting method, the preview interface is not affected by this parameter. Defaults to true.
@property (nonatomic) BOOL sortAscending;
/// Anything superior than 1 will enable the multiple selection feature. Defaults to 9.
@property (nonatomic) NSInteger maxSelectCount;
/// A count for video max selection. Defaults to 0.
/// warning:
/// Only valid in mix selection mode. (i.e. allowMixSelect = true)
@property (nonatomic) NSInteger maxVideoSelectCount;
/// A count for video min selection. Defaults to 0.
/// warning:
/// Only valid in mix selection mode. (i.e. allowMixSelect = true)
@property (nonatomic) NSInteger minVideoSelectCount;
/// Whether photos and videos can be selected together. Defaults to true.
/// If set to false, only one video can be selected. Defaults to true.
@property (nonatomic) BOOL allowMixSelect;
/// Preview selection max preview count, if the value is zero, only show <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons. Defaults to 20.
@property (nonatomic) NSInteger maxPreviewCount;
@property (nonatomic) CGFloat cellCornerRadio;
/// If set to false, gif and livephoto cannot be selected either. Defaults to true.
@property (nonatomic) BOOL allowSelectImage;
@property (nonatomic) BOOL allowSelectVideo;
/// Allow select Gif, it only controls whether it is displayed in Gif form.
/// If value is false, the Gif logo is not displayed. Defaults to true.
@property (nonatomic) BOOL allowSelectGif;
/// Allow select LivePhoto, it only controls whether it is displayed in LivePhoto form.
/// If value is false, the LivePhoto logo is not displayed. Defaults to false.
@property (nonatomic) BOOL allowSelectLivePhoto;
/// Allow take photos in the album. Defaults to true.
/// warning:
/// If allowTakePhoto and allowRecordVideo are both false, it will not be displayed.
@property (nonatomic) BOOL allowTakePhotoInLibrary;
@property (nonatomic) BOOL allowEditImage;
@property (nonatomic) BOOL allowEditVideo;
/// Control whether to display the selection button animation when selecting. Defaults to true.
@property (nonatomic) BOOL animateSelectBtnWhenSelect;
/// Animation duration for select button
@property (nonatomic) CFTimeInterval selectBtnAnimationDuration;
/// After selecting a image/video in the thumbnail interface, enter the editing interface directly. Defaults to false.
/// <ul>
///   <li>
///     discussion: Editing image is only valid when allowEditImage is true and maxSelectCount is 1.
///     Editing video is only valid when allowEditVideo is true and maxSelectCount is 1.
///   </li>
/// </ul>
@property (nonatomic) BOOL editAfterSelectThumbnailImage;
/// Only valid when allowMixSelect is false and allowEditVideo is true. Defaults to true.
/// Just like the Wechat-Timeline selection style. If you want to crop the video after select thumbnail under allowMixSelect = true, please use <em>editAfterSelectThumbnailImage</em>.
@property (nonatomic) BOOL cropVideoAfterSelectThumbnail;
/// If image edit tools only has clip and this property is true. When you click edit, the cropping interface (i.e. ZLClipImageViewController) will be displayed. Defaults to false.
@property (nonatomic) BOOL showClipDirectlyIfOnlyHasClipTool;
/// Save the edited image to the album after editing. Defaults to true.
@property (nonatomic) BOOL saveNewImageAfterEdit;
/// If true, you can slide select photos in album. Defaults to true.
@property (nonatomic) BOOL allowSlideSelect;
/// When slide select is active, will auto scroll to top or bottom when your finger at the top or bottom. Defaults to true.
@property (nonatomic) BOOL autoScrollWhenSlideSelectIsActive;
/// The max speed (pt/s) of auto scroll. Defaults to 600.
@property (nonatomic) CGFloat autoScrollMaxSpeed;
/// If true, you can drag select photo when preview selection style. Defaults to false.
@property (nonatomic) BOOL allowDragSelect;
/// Allow select full image. Defaults to true.
@property (nonatomic) BOOL allowSelectOriginal;
/// Allow access to the preview large image interface (That is, whether to allow access to the large image interface after clicking the thumbnail image). Defaults to true.
@property (nonatomic) BOOL allowPreviewPhotos;
/// Whether to show the status bar when previewing photos. Defaults to false.
@property (nonatomic) BOOL showStatusBarInPreviewInterface;
/// Whether to show the preview button (i.e. the preview button in the lower left corner of the thumbnail interface). Defaults to true.
@property (nonatomic) BOOL showPreviewButtonInAlbum;
/// The column count when iPhone is in portait mode. Minimum is 2, maximum is 6. Defaults to 4.
/// \code
/// iPhone landscape mode: columnCount += 2.
/// iPad portait mode: columnCount += 2.
/// iPad landscape mode: columnCount += 4.
///
/// \endcode
@property (nonatomic) NSInteger columnCount;
/// Maximum cropping time when editing video, unit: second. Defaults to 10.
@property (nonatomic) NSInteger maxEditVideoTime;
/// Allow to choose the maximum duration of the video. Defaults to 120.
@property (nonatomic) NSInteger maxSelectVideoDuration;
/// Allow to choose the minimum duration of the video. Defaults to 0.
@property (nonatomic) NSInteger minSelectVideoDuration;
/// Image editor configuration.
@property (nonatomic, strong) ZLEditImageConfiguration * _Nonnull editImageConfiguration;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull editImageDrawColors SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, strong) UIColor * _Nonnull editImageDefaultDrawColor SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, copy) NSArray<ZLImageClipRatio *> * _Nonnull editImageClipRatios SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull textStickerTextColors SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, strong) UIColor * _Nonnull textStickerDefaultTextColor SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, copy) NSArray<ZLFilter *> * _Nonnull filters SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
@property (nonatomic, strong) UIView <ZLImageStickerContainerDelegate> * _Nullable imageStickerContainerView SWIFT_DEPRECATED_MSG("Use editImageConfiguration, this property will be removed");
/// Show the image captured by the camera is displayed on the camera button inside the album. Defaults to false.
@property (nonatomic) BOOL showCaptureImageOnTakePhotoBtn;
/// In single selection mode, whether to display the selection button. Defaults to false.
@property (nonatomic) BOOL showSelectBtnWhenSingleSelect;
/// Overlay a mask layer on top of the selected photos. Defaults to true.
@property (nonatomic) BOOL showSelectedMask;
/// Display a border on the selected photos cell. Defaults to false.
@property (nonatomic) BOOL showSelectedBorder;
/// Overlay a mask layer above the cells that cannot be selected. Defaults to true.
@property (nonatomic) BOOL showInvalidMask;
/// Display the index of the selected photos. Defaults to true.
@property (nonatomic) BOOL showSelectedIndex;
/// Display the selected photos at the bottom of the preview large photos interface. Defaults to true.
@property (nonatomic) BOOL showSelectedPhotoPreview;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”, “zl_btn_unselected”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull customImageNames;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”: selectedImage, “zl_btn_unselected”: unselectedImage].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, UIImage *> * _Nonnull customImageForKey_objc;
/// Allow framework fetch photos when callback. Defaults to true.
@property (nonatomic) BOOL shouldAnialysisAsset;
/// Timeout for image parsing. Defaults to 20.
@property (nonatomic) NSTimeInterval timeout;
/// Language for framework.
@property (nonatomic) enum ZLLanguageType languageType;
/// Developers can customize languages (This property is only for objc).
/// warning:
/// Please pay attention to the placeholders contained in languages when changing, such as %ld, %@.
/// <ul>
///   <li>
///     example: If you needs to replace
///     key: @“loading”, value: @“loading, waiting please” language,
///     The dictionary that needs to be passed in is @[@“loading”: @“text to be replaced”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customLanguageKeyValue_objc;
/// Whether to use custom camera. Defaults to true.
@property (nonatomic) BOOL useCustomCamera;
/// Allow taking photos in the camera (Need allowSelectImage to be true). Defaults to true.
@property (nonatomic) BOOL allowTakePhoto;
/// Allow recording in the camera (Need allowSelectVideo to be true). Defaults to true.
@property (nonatomic) BOOL allowRecordVideo;
/// Minimum recording duration. Defaults to 0.
@property (nonatomic) NSInteger minRecordDuration;
/// Maximum recording duration. Defaults to 10, minimum is 1.
@property (nonatomic) NSInteger maxRecordDuration;
/// The configuration for camera.
@property (nonatomic, strong) ZLCameraConfiguration * _Nonnull cameraConfiguration;
/// Hud style. Defaults to lightBlur.
@property (nonatomic) enum HUDStyle hudStyle;
/// The blur effect of the navigation bar in the album list
@property (nonatomic, strong) UIBlurEffect * _Nullable navViewBlurEffectOfAlbumList;
/// The blur effect of the navigation bar in the preview interface
@property (nonatomic, strong) UIBlurEffect * _Nullable navViewBlurEffectOfPreview;
/// The blur effect of the bottom tool bar in the album list
@property (nonatomic, strong) UIBlurEffect * _Nullable bottomViewBlurEffectOfAlbumList;
/// The blur effect of the bottom tool bar in the preview interface
@property (nonatomic, strong) UIBlurEffect * _Nullable bottomViewBlurEffectOfPreview;
/// Color configuration for framework.
@property (nonatomic, strong) ZLPhotoThemeColorDeploy * _Nonnull themeColorDeploy;
/// Font name.
@property (nonatomic, copy) NSString * _Nullable themeFontName;
/// This block will be called before selecting an image, the developer can first determine whether the asset is allowed to be selected.
/// Only control whether it is allowed to be selected, and will not affect the selection logic in the framework.
/// <ul>
///   <li>
///     Tips: If the choice is not allowed, the developer can toast prompt the user for relevant information.
///   </li>
/// </ul>
@property (nonatomic, copy) BOOL (^ _Nullable canSelectAsset)(PHAsset * _Nonnull);
/// If user choose limited Photo mode, a button with ‘+’ will be added to the ZLThumbnailViewController. It will call PHPhotoLibrary.shared().presentLimitedLibraryPicker(from:) to add photo. Defaults to true.
/// E.g., Sina Weibo’s ImagePicker
@property (nonatomic) BOOL showAddPhotoButton;
/// iOS14 limited Photo mode, will show collection footer view in ZLThumbnailViewController.
/// Will go to system setting if clicked. Defaults to true.
@property (nonatomic) BOOL showEnterSettingTips;
/// Callback after the no authority alert dismiss.
@property (nonatomic, copy) void (^ _Nullable noAuthorityCallback)(enum ZLNoAuthorityType);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CancelButtonStyle, open) {
  CancelButtonStyleText = 0,
  CancelButtonStyleImage = 1,
};


@interface ZLPhotoConfiguration (SWIFT_EXTENSION(ZLPhotoBrowser))
- (ZLPhotoConfiguration * _Nonnull)allowSelectVideo:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)canSelectAsset:(BOOL (^ _Nullable)(PHAsset * _Nonnull))block;
- (ZLPhotoConfiguration * _Nonnull)showAddPhotoButton:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)showEnterSettingTips:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)noAuthorityCallback:(void (^ _Nullable)(enum ZLNoAuthorityType))callback;
@end

@class ZLPhotoModel;
@class NSData;
@class PHLivePhoto;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14ZLPhotoBrowser14ZLPhotoManager")
@interface ZLPhotoManager : NSObject
/// Save image to album.
+ (void)saveImageToAlbumWithImage:(UIImage * _Nonnull)image completion:(void (^ _Nullable)(BOOL, PHAsset * _Nullable))completion;
/// Save video to album.
+ (void)saveVideoToAlbumWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nullable)(BOOL, PHAsset * _Nullable))completion;
/// Fetch photos from result.
+ (NSArray<ZLPhotoModel *> * _Nonnull)fetchPhotoIn:(PHFetchResult<PHAsset *> * _Nonnull)result ascending:(BOOL)ascending allowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo limitCount:(NSInteger)limitCount SWIFT_WARN_UNUSED_RESULT;
/// Fetch all album list.
+ (void)getPhotoAlbumListWithAscending:(BOOL)ascending allowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<ZLAlbumListModel *> * _Nonnull))completion;
/// Fetch camera roll album.
+ (void)getCameraRollAlbumWithAllowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo completion:(void (^ _Nonnull)(ZLAlbumListModel * _Nonnull))completion;
+ (PHImageRequestID)fetchImageFor:(PHAsset * _Nonnull)asset size:(CGSize)size progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(UIImage * _Nullable, BOOL))completion;
+ (PHImageRequestID)fetchOriginalImageFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(UIImage * _Nullable, BOOL))completion;
/// Fetch asset data.
+ (PHImageRequestID)fetchOriginalImageDataFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(NSData * _Nonnull, NSDictionary * _Nullable, BOOL))completion;
+ (PHImageRequestID)fetchLivePhotoFor:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(PHLivePhoto * _Nullable, NSDictionary * _Nullable, BOOL))completion SWIFT_WARN_UNUSED_RESULT;
+ (PHImageRequestID)fetchVideoFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(AVPlayerItem * _Nullable, NSDictionary * _Nullable, BOOL))completion SWIFT_WARN_UNUSED_RESULT;
+ (PHImageRequestID)fetchAVAssetForVideo:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Fetch asset local file path.
+ (void)fetchAssetFilePathWithAsset:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLPhotoManager (SWIFT_EXTENSION(ZLPhotoBrowser))
+ (BOOL)hasPhotoLibratyAuthority SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasCameraAuthority SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasMicrophoneAuthority SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14ZLPhotoBrowser12ZLPhotoModel")
@interface ZLPhotoModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC14ZLPhotoBrowser19ZLPhotoPreviewSheet")
@interface ZLPhotoPreviewSheet : UIView
/// Success callback
/// block params
/// <ul>
///   <li>
///     params1: images for asset.
///   </li>
///   <li>
///     params2: selected assets
///   </li>
///   <li>
///     params3: is full image
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable selectImageBlock)(NSArray<UIImage *> * _Nonnull, NSArray<PHAsset *> * _Nonnull, BOOL);
/// Callback for photos that failed to parse
/// block params
/// <ul>
///   <li>
///     params1: failed assets.
///   </li>
///   <li>
///     params2: index for asset
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable selectImageRequestErrorBlock)(NSArray<PHAsset *> * _Nonnull, NSArray<NSNumber *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// \param selectedAssets preselected assets
///
- (nonnull instancetype)initWithSelectedAssets:(NSArray<PHAsset *> * _Nullable)selectedAssets OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)showPreviewWithAnimate:(BOOL)animate sender:(UIViewController * _Nonnull)sender;
- (void)showPhotoLibraryWithSender:(UIViewController * _Nonnull)sender;
/// 传入已选择的assets，并预览
- (void)previewAssetsWithSender:(UIViewController * _Nonnull)sender assets:(NSArray<PHAsset *> * _Nonnull)assets index:(NSInteger)index isOriginal:(BOOL)isOriginal showBottomViewAndSelectBtn:(BOOL)showBottomViewAndSelectBtn;
@end

@class PHChange;

@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <PHPhotoLibraryChangeObserver>
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInstance;
@end


@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImagePickerController;

@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end


@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(ZLPhotoBrowser)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// Color deploy
SWIFT_CLASS("_TtC14ZLPhotoBrowser23ZLPhotoThemeColorDeploy")
@interface ZLPhotoThemeColorDeploy : NSObject
+ (ZLPhotoThemeColorDeploy * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Preview selection mode, transparent background color above.
/// 预览快速选择模式下，上方透明区域背景色
@property (nonatomic, strong) UIColor * _Nonnull previewBgColor;
/// Preview selection mode, a background color for <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons.
/// 预览快速选择模式下，按钮背景颜色
@property (nonatomic, strong) UIColor * _Nonnull previewBtnBgColor;
/// Preview selection mode, a text color for <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons.
/// 预览快速选择模式下，按钮标题颜色
@property (nonatomic, strong) UIColor * _Nonnull previewBtnTitleColor;
/// Preview selection mode, cancel button title color when the selection amount is superior than 0.
/// 预览快速选择模式下，按钮标题高亮颜色
@property (nonatomic, strong) UIColor * _Nonnull previewBtnHighlightTitleColor;
/// A color for navigation bar.
/// 相册列表及小图界面导航条背景色
@property (nonatomic, strong) UIColor * _Nonnull navBarColor;
/// A color for navigation bar in preview interface.
/// 预览大图界面的导航条背景色
@property (nonatomic, strong) UIColor * _Nonnull navBarColorOfPreviewVC;
/// A color for Navigation bar text.
/// 相册列表及小图界面导航栏标题颜色
@property (nonatomic, strong) UIColor * _Nonnull navTitleColor;
/// A color for Navigation bar text of preview vc.
/// 预览大图界面导航栏标题颜色
@property (nonatomic, strong) UIColor * _Nonnull navTitleColorOfPreviewVC;
/// The background color of the title view when the frame style is embedAlbumList.
/// 下拉选择相册列表模式下，选择区域的背景色
@property (nonatomic, strong) UIColor * _Nonnull navEmbedTitleViewBgColor;
/// A color for background in album list.
/// 相册列表背景色
@property (nonatomic, strong) UIColor * _Nonnull albumListBgColor;
/// A color for album list title label.
/// 相册列表标题颜色
@property (nonatomic, strong) UIColor * _Nonnull albumListTitleColor;
/// A color for album list count label.
/// 相册列表数量label的颜色
@property (nonatomic, strong) UIColor * _Nonnull albumListCountColor;
/// A color for album list separator.
/// 相册列表分割线颜色
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// A color for background in thumbnail interface.
/// 相册小图界面背景色
@property (nonatomic, strong) UIColor * _Nonnull thumbnailBgColor;
/// A color for background in bottom tool view.
/// 相册小图界面底部工具条背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBgColor;
/// A color for background in bottom tool view in preview interface.
/// 预览大图界面底部工具条背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBgColorOfPreviewVC;
/// The normal state title color of bottom tool view buttons. Without done button.
/// 相册小图界面底部按钮可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalTitleColor;
/// The normal state title color of bottom tool view done button.
/// 相册小图界面底部 <code>完成</code> 按钮可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnNormalTitleColor;
/// The normal state title color of bottom tool view buttons in preview interface.  Without done button.
/// 预览大图界面底部按钮可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalTitleColorOfPreviewVC;
/// The normal state title color of bottom tool view done button.
/// 预览大图界面底部 <code>完成</code> 按钮可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnNormalTitleColorOfPreviewVC;
/// The disable state title color of bottom tool view buttons.  Without done button.
/// 相册小图界面底部按钮不可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableTitleColor;
/// The disable state title color of bottom tool view done button.
/// 相册小图界面底部 <code>完成</code> 按钮不可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnDisableTitleColor;
/// The disable state title color of bottom tool view buttons in preview interface.  Without done button.
/// 预览大图界面底部按钮不可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableTitleColorOfPreviewVC;
/// The disable state title color of bottom tool view done button  in preview interface.
/// 预览大图界面底部 <code>完成</code> 按钮不可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnDisableTitleColorOfPreviewVC;
/// The normal state background color of bottom tool view buttons.
/// 相册小图界面底部按钮可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalBgColor;
/// The normal state background color of bottom tool view buttons in preview interface.
/// 预览大图界面底部按钮可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalBgColorOfPreviewVC;
/// The disable state background color of bottom tool view buttons.
/// 相册小图界面底部按钮不可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableBgColor;
/// The disable state background color of bottom tool view buttons in preview interface.
/// 预览大图界面底部按钮不可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableBgColorOfPreviewVC;
/// With iOS14 limited authority, a color for select more photos at the bottom of the thumbnail interface.
/// iOS14 limited权限下，下方提示选择更多图片信息文字的颜色
@property (nonatomic, strong) UIColor * _Nonnull selectMorePhotoWhenAuthIsLismitedTitleColor;
/// The record progress color of custom camera.
/// 自定义相机录制视频时进度条颜色
@property (nonatomic, strong) UIColor * _Nonnull cameraRecodeProgressColor;
/// Mask layer color of selected cell.
/// 已选择照片上方遮罩阴影颜色
@property (nonatomic, strong) UIColor * _Nonnull selectedMaskColor;
/// Border color of selected cell.
/// 已选择照片border颜色
@property (nonatomic, strong) UIColor * _Nonnull selectedBorderColor;
/// Mask layer color of the cell that cannot be selected.
/// 不可选的照片上方遮罩阴影颜色
@property (nonatomic, strong) UIColor * _Nonnull invalidMaskColor;
/// The background color of selected cell index label.
/// 已选照片右上角序号label背景色
@property (nonatomic, strong) UIColor * _Nonnull indexLabelBgColor;
/// The background color of camera cell inside album.
/// 相册小图界面拍照按钮背景色
@property (nonatomic, strong) UIColor * _Nonnull cameraCellBgColor;
/// The normal color of adjust slider.
/// 编辑图片，调整饱和度、对比度、亮度时，右侧slider背景色
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderNormalColor;
/// The tint color of adjust slider.
/// 编辑图片，调整饱和度、对比度、亮度时，右侧slider背景高亮色
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderTintColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14ZLPhotoBrowser13ZLProgressHUD")
@interface ZLProgressHUD : UIView
- (nonnull instancetype)initWithStyle:(enum HUDStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)showWithTimeout:(NSTimeInterval)timeout;
- (void)hide;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, HUDStyle, open) {
  HUDStyleLight = 0,
  HUDStyleLightBlur = 1,
  HUDStyleDark = 2,
  HUDStyleDarkBlur = 3,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser18ZLTextStickerState")
@interface ZLTextStickerState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLURLType, open) {
  ZLURLTypeImage = 0,
  ZLURLTypeVideo = 1,
};


SWIFT_CLASS("_TtC14ZLPhotoBrowser14ZLVideoManager")
@interface ZLVideoManager : NSObject
/// 没有针对不同分辨率视频做处理，仅用于处理相机拍照的视频
+ (void)mergeVideosWithFileUrls:(NSArray<NSURL *> * _Nonnull)fileUrls completion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLVideoManager (SWIFT_EXTENSION(ZLPhotoBrowser))
@end

typedef SWIFT_ENUM(NSInteger, ExportType, open) {
  ExportTypeMov = 0,
  ExportTypeMp4 = 1,
};


@interface ZLVideoManager (SWIFT_EXTENSION(ZLPhotoBrowser))
+ (void)exportVideoFor:(PHAsset * _Nonnull)asset exportType:(enum ExportType)exportType presetName:(NSString * _Nonnull)presetName complete:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))complete;
+ (void)exportVideoFor:(AVAsset * _Nonnull)asset range:(CMTimeRange)range exportType:(enum ExportType)exportType presetName:(NSString * _Nonnull)presetName complete:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))complete;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
